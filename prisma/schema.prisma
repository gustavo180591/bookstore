generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id @default(cuid())
  email            String              @unique
  passwordHash     String
  role             Role                @default(CUSTOMER)
  documentType     DocumentTypeAR      @default(DNI)
  documentNumber   String              @unique @db.VarChar(20)
  firstName        String?             @db.VarChar(80)
  lastName         String?             @db.VarChar(80)
  phone            String?             @db.VarChar(30)
  acceptsMarketing Boolean             @default(false)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  addresses        Address[]
  budgets          Budget[]
  carts            Cart[]
  institutions     InstitutionMember[]
  orders           Order[]
  payments         Payment[]
  sessions         Session[]
  createdLists     SchoolList[]        @relation("CreatedLists")

  @@index([email])
  @@index([documentNumber])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Institution {
  id          String              @id @default(cuid())
  name        String
  cuit        String?             @db.VarChar(20)
  phone       String?             @db.VarChar(30)
  email       String?             @db.VarChar(120)
  address     String?             @db.VarChar(255)
  city        String?             @db.VarChar(100)
  province    String?             @db.VarChar(100)
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  addressId   String?             @unique
  members     InstitutionMember[]
  schoolLists SchoolList[]
  budgets     Budget[]
  addressRef  Address?            @relation("InstitutionAddress", fields: [addressId], references: [id])

  @@index([name])
  @@index([cuit])
  @@index([email])
  @@index([isActive])
}

model InstitutionMember {
  id            String               @id @default(cuid())
  userId        String
  institutionId String
  role          InstitutionMemberRole @default(MEMBER)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  institution Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  @@unique([userId, institutionId])
  @@index([institutionId])
  @@index([role])
}

model Address {
  id            String       @id @default(cuid())
  userId        String?
  institutionId String?      @unique @map("institution_id")
  orderId       String?      @unique @map("order_id")
  type          AddressType
  fullName      String
  phone         String?      @db.VarChar(30)
  street        String
  number        String?      @db.VarChar(10)
  floor         String?      @db.VarChar(10)
  apartment     String?      @db.VarChar(10)
  city          String
  province      ProvinceAR
  postalCode    String       @db.VarChar(10)
  extraInfo     String?      @db.VarChar(255)
  institution   Institution? @relation("InstitutionAddress")
  order         Order?       @relation("OrderAddress", fields: [orderId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([institutionId])
}

model Product {
  id            String       @id @default(cuid())
  name          String
  description   String?
  price         Decimal      @db.Decimal(10, 2)
  originalPrice Decimal      @default(0) @db.Decimal(10, 2)
  stock         Int          @default(0)
  sku           String?      @unique
  category      String?
  imageUrl      String?
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  budgetItems BudgetItem[]
  schoolLists SchoolListItem[]
  bundleProducts BundleProduct[]
  stockReservations StockReservation[]

  @@index([name])
  @@index([category])
  @@index([sku])
  @@index([isActive])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  stockReservations StockReservation[]

  @@index([userId])
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
}

model StockReservation {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
  @@index([expiresAt])
}

model Order {
  id                String          @id @default(cuid())
  userId            String
  status            OrderStatus     @default(CREADO)
  total             Decimal         @db.Decimal(10, 2)
  currency          Currency        @default(ARS)
  shippingAddressId String?         @unique
  shippingCarrier   ShippingCarrier @default(RETIRO_EN_LOCAL)
  shippingCost      Decimal         @default(0) @db.Decimal(10, 2)
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  shippingAddress   Address?        @relation("OrderAddress")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items             OrderItem[]
  payments          Payment[]
  budgets           Budget[]        @relation("BudgetToOrder")
  coupons           OrderCoupon[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id         String          @id @default(cuid())
  orderId    String
  userId     String
  amount     Decimal         @db.Decimal(10, 2)
  currency   Currency        @default(ARS)
  status     PaymentStatus   @default(PENDING)
  provider   PaymentProvider
  externalId String?
  paidAt     DateTime?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  order      Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([externalId])
}

model Budget {
  id            String       @id @default(cuid())
  userId        String
  institutionId String?
  title         String
  description   String?
  total         Decimal      @default(0) @db.Decimal(10, 2)
  currency      Currency     @default(ARS)
  status        String       @default("PENDING")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  institution   Institution? @relation(fields: [institutionId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         BudgetItem[]
  orders        Order[]      @relation("BudgetToOrder")

  @@index([userId])
  @@index([institutionId])
  @@index([status])
}

model BudgetItem {
  id        String  @id @default(cuid())
  budgetId  String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  budget    Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([budgetId])
  @@index([productId])
}

model SchoolList {
  id            String          @id @default(cuid())
  name          String
  description   String?
  grade         String
  institutionId String
  createdById   String
  isPublic      Boolean         @default(false)
  status        SchoolListStatus @default(DRAFT)
  notes         String?         @db.Text
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  institution   Institution     @relation(fields: [institutionId], references: [id])
  createdBy     User            @relation("CreatedLists", fields: [createdById], references: [id])
  items         SchoolListItem[]

  @@index([institutionId])
  @@index([createdById])
  @@index([status])
  @@index([grade])
  @@index([isPublic])
}

model SchoolListItem {
  id           String     @id @default(cuid())
  schoolListId String
  productId    String?
  name         String
  quantity     Int        @default(1)
  notes        String?    @db.Text
  sortOrder    Int        @default(0)
  isOptional   Boolean    @default(false)
  status       ItemStatus @default(PENDING)
  price        Decimal?   @db.Decimal(10, 2)

  // Relations
  schoolList   SchoolList @relation(fields: [schoolListId], references: [id], onDelete: Cascade)
  product      Product?   @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@index([schoolListId])
  @@index([productId])
  @@index([status])
  @@index([sortOrder])
}

model Bundle {
  id          String   @id @default(cuid())
  name        String
  description String?
  discountType DiscountType
  discountValue Decimal @db.Decimal(10, 2)
  products    BundleProduct[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([isActive])
}

model BundleProduct {
  id        String @id @default(cuid())
  bundleId  String
  productId String
  bundle    Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([bundleId, productId])
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  discountType DiscountType
  discountValue Decimal @db.Decimal(10, 2)
  minOrderValue Decimal? @db.Decimal(10, 2)
  maxUses     Int?
  usedCount   Int      @default(0)
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      OrderCoupon[]

  @@index([code])
  @@index([isActive])
  @@index([expiresAt])
}

model OrderCoupon {
  id       String @id @default(cuid())
  orderId  String
  couponId String
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([orderId, couponId])
}

// Enums
enum InstitutionMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum SchoolListStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ItemStatus {
  PENDING     // Item pendiente de búsqueda
  FOUND       // Item encontrado en el inventario
  NOT_FOUND   // Item no encontrado
  SUBSTITUTED // Item reemplazado por uno similar
}

enum Role {
  ADMIN
  MANAGER
  CUSTOMER
}

enum Currency {
  ARS
  USD
}

enum DocumentTypeAR {
  DNI
  CUIL
  CUIT
}

enum ProvinceAR {
  BUENOS_AIRES
  CATAMARCA
  CHACO
  CHUBUT
  CORDOBA
  CORRIENTES
  ENTRE_RIOS
  FORMOSA
  JUJUY
  LA_PAMPA
  LA_RIOJA
  MENDOZA
  MISIONES
  NEUQUEN
  RIO_NEGRO
  SALTA
  SAN_JUAN
  SAN_LUIS
  SANTA_CRUZ
  SANTA_FE
  SANTIAGO_DEL_ESTERO
  TIERRA_DEL_FUEGO
  TUCUMAN
  CABA
}

enum OrderStatus {
  CREADO
  PAGO_PENDIENTE
  PAGO_APROBADO
  PREPARANDO
  DESPACHADO
  ENTREGADO
  CANCELADO
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  PARTIALLY_REFUNDED
  REFUNDED
  FAILED
  CANCELED
}

enum PaymentProvider {
  MERCADO_PAGO
  TRANSFERENCIA
}

enum ShippingCarrier {
  ANDREANI
  OCA
  CORREO_ARG
  MERCADO_ENVIOS
  RETIRO_EN_LOCAL
}

enum AddressType {
  BILLING
  SHIPPING
}

enum DiscountType {
  PERCENT
  FIXED_AMOUNT
  FREE_SHIPPING
}
